I. Selection sort
	1. Ý tưởng:
		✓ Chọn phần tử nhỏ nhất trong N phần tử trong dãy hiện hành ban đầu.
		✓ Đưa phần tử này về vị trí đầu dãy hiện hành.
		✓ Xem dãy hiện hành chỉ còn N-1 phần tử của dãy hiện hành ban đầu
			o Bắt đầu từ vị trí thứ 2;
			o Lặp lại quá trình trên cho dãy hiện hành đến khi dãy hiện hành chỉ còn 1 phần tử
	2. Thuật toán:
		Đầu vào: A={a0 , a1, .., an-1} chưa có thứ tự 
		Đầu ra: A={a0, a1, .., an-1} đã có thứ tự 
		❖ Các bước thực hiện:
			Bước 1: i = 0;
			Bước 2: Tìm phần tử a[min] nhỏ nhất trong dãy hiện hành từ a[i] đến a[N] .
			Bước 3: Đổi chỗ a[min] và a[i]
			Bước 4: Nếu i < N-1 thì i=i+1; Lặp lại Bước 2; 
					Ngược lại: Dừng
	- Độ phức tạp: tốt nhất, tb, xấu nhất = O(n^2)

II. Insert sort
	1. Ý tưởng:
		✓ Giả sử có một dãy A={a0, a1, .., an-1} trong đó i phần tử đầu tiên a0, a1,... ,ai-1 đã có thứ tự.
		✓ Tìm cách chèn phần tử ai vào vị trí thích hợp của đoạn đã được sắp để có dãy mới a0, a1,... ,aitrở nên có thứ tự. 
		   Vị trí này chính là vị trí giữa hai phần tử ak-1 và ak thỏa ak-1 < ai < ak (1≤k≤i)
	2. Thuật toán
			- Các bước thực hiện:
		Bước 1: i = 1;
		Bước 2: x = a[i]; //Tìm vị trí pos thích hợp trong đoạn a[1] đến a[i-1] để chèn a[i] vào
		Bước 3: Dời chỗ các phần tử từ a[pos] đến a[i-1] sang phải 1 vị trí để dành chổ cho a[i]
		Bước 4: a[pos] = x; //có đoạn a[1]..a[i] đã được sắp
		Bước 5: i = i+1; Nếu i < n : Lặp lại Bước 2
				Ngược lại: Dừng
	- Độ phức tạp:
		+ Tốt nhất: O(n)
		+ Trung bình: O(n^2)
		+ Xấu nhất: O(n^2)


III. Quick Sort

	- Ý tưởng: chia mảng thành hai phần bằng cách so sánh từng phần tử của mảng với một phần tử được gọi là phần tử chốt. 
				Một mảng bao gồm các phần tử nhỏ hơn hoặc bằng phần tử chốt và một mảng gồm các phần tử lớn hơn phần tử chốt.

	1. Giải thuật:
		+ Bước 1 : Chọn tùy ý phần tử a[k] trong dãy là giá trị mốc ( l ≤ k ≤ r):
						x = a[k]; i = l; j = r;
		+ Bước 2 : Phát hiện và hiệu chỉnh cặp phần tử a[i], a[j] nằm sai chỗ:
						Bước 2a : Trong khi (a[i]<x) i++;
						Bước 2b : Trong khi (a[j]>x) j--;
						Bước 2c : Nếu i< j Swap(a[i],a[j]);
		+ Bước 3 : Nếu i < j: Lặp lại Bước 2.
					Ngược lại: Dừng

	- Độ phức tạp:
		+ Tốt nhất: O(nlogn)
		+ Trung bình: O(nlogn)
		+ Xấu nhất: O(n^2)

IV. Mert Sort
	- Ý tưởng: Thuật toán này chia mảng cần sắp xếp thành 2 nửa. Tiếp tục lặp lại việc này ở các nửa mảng đã chia. 
				Sau cùng gộp các nửa đó thành mảng đã sắp xếp.
	1. Thuật toán:
		- Bước 1: Khởi tạo i=0,j=0,k=0 cho 3 mảng A[], B[], C[].
		- Bước 2: Tại mỗi bước tại chỉ số (i<n và j<m) ta chọn min B[i]C[j] lưu vào C[k]. Chuyển sang bước 4.
		- Bước 3: k=k+2 quay lại bước 2
		- Bước 4: Sao chép các giá trị còn lại từ các danh sách mà các chỉ số còn vi phạm (i<m hoặc j<m) vào mảng C[].
	
	=> Độ phức tạp: O(nlogn)

VI. Heap Sort
	- Ý tưởng: 
		+ Chia mảng ban đầu thành hai mảng con: Một mảng bao gồm các phần tử đã sắp xếp và một mảng bao gồm các phần tử còn lại chưa được sắp xếp. 
		   Ban đầu, mảng đã sắp xếp là mảng rỗng, mảng chưa sắp xếp chính là mảng ban đầu.
		+ Tìm phần tử nhỏ nhất/lớn nhất trong mảng chưa sắp xếp và đưa nó vào cuối mảng đã sắp xếp (tùy vào cách sắp xếp là tăng dần hay giảm dần). 
		   Đây chính là bước cần sử dụng đến cấu trúc dữ liệu Heap.